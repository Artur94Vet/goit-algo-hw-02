# Опис завдання
'''
Завдання 3 (необов'язкове завдання). Ханойські башти

Напишіть програму, яка виконує переміщення дисків з стрижня А на стрижень С, 
використовуючи стрижень В як допоміжний. Диски мають різний розмір і розміщені на початковому стрижні у порядку зменшення розміру зверху вниз.

Правила:

1. За один крок можна перемістити тільки один диск.

2. Диск можна класти тільки на більший диск або на порожній стрижень.

Вхідними даними програми має бути число n — кількість дисків на початковому стрижні. Вихідними даними — логування послідовності кроків для переміщення дисків зі стрижня А на стрижень С.


Наведемо приклад виконання коду для кількості дисків n = 3. На початковому стрижні вони розміщені так: [3, 2, 1], де 3 — найбільший диск, а 1 — найменший.

Початковий стан: {'A': [3, 2, 1], 'B': [], 'C': []}
Перемістити диск з A на C: 1
Проміжний стан: {'A': [3, 2], 'B': [], 'C': [1]}
Перемістити диск з A на B: 2
Проміжний стан: {'A': [3], 'B': [2], 'C': [1]}
Перемістити диск з C на B: 1
Проміжний стан: {'A': [3], 'B': [2, 1], 'C': []}
Перемістити диск з A на C: 3
Проміжний стан: {'A': [], 'B': [2, 1], 'C': [3]}
Перемістити диск з B на A: 1
Проміжний стан: {'A': [1], 'B': [2], 'C': [3]}
Перемістити диск з B на C: 2
Проміжний стан: {'A': [1], 'B': [], 'C': [3, 2]}
Перемістити диск з A на C: 1
Проміжний стан: {'A': [], 'B': [], 'C': [3, 2, 1]}
Кінцевий стан: {'A': [], 'B': [], 'C': [3, 2, 1]}

'''
# Виконання завдання

def hanoi(n, source, auxiliary, target, state):
    """
    Рекурсивна функція для вирішення задачі Ханойських веж.
    n - кількість дисків
    source - початковий стрижень
    auxiliary - допоміжний стрижень
    target - кінцевий стрижень
    state - словник з поточним станом стрижнів
    """
    if n == 1:
        move_disk(source, target, state)
    else:
        hanoi(n-1, source, target, auxiliary, state)
        move_disk(source, target, state)
        hanoi(n-1, auxiliary, source, target, state)

def move_disk(source, target, state):
    """
    Переміщення одного диску зі стрижня source на стрижень target.
    """
    disk = state[source].pop()
    state[target].append(disk)
    print(f"Перемістити диск з {source} на {target}: {disk}")
    print(f"Проміжний стан: {state}")

def main():
    try:
        n = int(input("Введіть кількість дисків (наприклад: 3): "))
        if n <= 0:
            print("Кількість дисків повинна бути більшою за 0. Використаємо 3 за замовчуванням.")
            n = 3
    except ValueError:
        print("Некоректне значення. Використаємо 3 за замовчуванням.")
        n = 3

    state = {
        'A': list(range(n, 0, -1)),  # диски на початковому стрижні (найбільший внизу)
        'B': [],
        'C': []
    }

    print(f"Початковий стан: {state}")
    hanoi(n, 'A', 'B', 'C', state)
    print(f"Кінцевий стан: {state}")

if __name__ == "__main__":
    main()
