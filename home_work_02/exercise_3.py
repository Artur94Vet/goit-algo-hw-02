# –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è
'''
–ó–∞–≤–¥–∞–Ω–Ω—è 3 (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è)

–£ –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–∏ –º–∞—î–º–æ —Å–ø—Ä–∞–≤—É –∑ –≤–∏—Ä–∞–∑–∞–º–∏, –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏, —Ç–∞–∫–∏–º–∏ —è–∫ –∫—Ä—É–≥–ª—ñ ( ), –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ [ ] –∞–±–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ { }.

–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —á–∏—Ç–∞—î —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ( ) { [ ] ( ) ( ) { } } }, 
—ñ –Ω–∞–¥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ( ( ( ) , –∞–±–æ –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ —Å—Ç–æ—è—Ç—å —É –ø–∞—Ä—ñ, —è–∫-–æ—Ç ( }.

 üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫, —â–æ–± –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ.

–ü—Ä–∏–∫–ª–∞–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:

( ){[ 1 ]( 1 + 3 )( ){ }}: –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
( 23 ( 2 - 3);: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
( 11 }: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
'''
# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è

def check_brackets(expression):
    stack = []
    brackets = {'(': ')', '[': ']', '{': '}'}

    for char in expression:
        if char in brackets:  # —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞
            stack.append(char)
        elif char in brackets.values():  # —è–∫—â–æ –∑–∞–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞
            if not stack:
                return "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"
            last_open = stack.pop()
            if brackets[last_open] != char:
                return "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"

    if not stack:
        return "–°–∏–º–µ—Ç—Ä–∏—á–Ω–æ"
    else:
        return "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"


# –¢–µ—Å—Ç–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑ –æ–ø–∏—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è:

examples = [
    "( ){[ 1 ]( 1 + 3 )( ){ }}",
    "( 23 ( 2 - 3);",
    "( 11 }"
]

for expr in examples:
    print(f"{expr}: {check_brackets(expr)}")